// getting settings and language
         var settings, user_data, param_id, param_id_object, old_data, is_update; 

         try{
             settings = await get_setting();
             user_data = await usr.get_session();
         } catch(error){}
 
         var language =  get_lang(settings.language);
         
         // getting user data and check for session expiration 
         if( user_data == null || ! Object.keys(user_data).length ) {
             return {
                 login_redirect: true, 
                 message: language.user_session_expired, 
                 is_error: true , 
                 data: []
             };
         }
         
         // checking for instance and key in mobject 
         var {key, instance} = mobject;
         if(key == undefined || instance == undefined) {
             return {
                 login_redirect: false, 
                 message: language.api_error, 
                 is_error: true , 
                 data: []
             };
         }
         
         // check if parameter id is not null so store it in given variables
         param_id = obj_data.local_id == undefined ? generateId(): obj_data.local_id; 
         if(parameter_id != null && typeof parameter_id != 'object') {
             param_id = parameter_id;
         }   
        
         
         if( typeof parameter_id == 'object' && parameter_id != null ) {
             if( parameter_id.local_id != undefined ) {
                 param_id = parameter_id.local_id;
             }
         }
         
         param_id_object = {local_id:  param_id }
         if(parameter_id != null && typeof parameter_id == 'object') {
             param_id_object = {...parameter_id};
         }  
         
        
         // getting the records from storage 
        old_data = await this.get_data_locally(mobject);
         
         // preparing insertion data 
         var __object = {
             application_id:user_data.application_id,
             local_id: param_id,
             updated_date: Date.now(),
             created_date: Date.now(),
             updated_by: {
                 id:  user_data.id,
                 name: user_data.name,
                 email: user_data.email 
             },
             created_by: {
                 id:  user_data.id,
                 name: user_data.name,
                 email: user_data.email 
             }
         }
 
         // build update object 
         if( obj_data.local_id != undefined || parameter_id != null ) {
             
             __object = {
                 local_id: param_id,
                 updated_date: Date.now(),
                 updated_by: {
                     id:  user_data.id,
                     name: user_data.name,
                     email: user_data.email 
                 },
             }
         } 
 
        
         // check if it is update or insert process 
         var objectIndex = old_data.findIndex(x => {
                 
             if( typeof param_id_object == 'object'  ) {
                 var key__ = Object.keys(param_id_object)[0]; 
                  
                 return x[key__] == param_id_object[key__]; 
             }
              
             return x.local_id == param_id;
 
         });
 
         
         if( objectIndex == -1 ) {
             
             // check it is not update 
             is_update = false; 
 
             // attatch the create object here 
             __object = {
                 application_id:user_data.application_id,
                 local_id: param_id,
                 updated_date: Date.now(),
                 created_date: Date.now(),
                 updated_by: {
                     id:  user_data.id,
                     name: user_data.name,
                     email: user_data.email 
                 },
                 created_by: {
                     id:  user_data.id,
                     name: user_data.name,
                     email: user_data.email 
                 }
             }
 
         } else {
 
             // update an existing object 
             is_update = true; 
         }
         
        
         // __object = {...__object, ...obj_data}; 
        
         // case it is update 
         if( (obj_data.local_id != undefined || parameter_id != null) && is_update && objectIndex == -1 ) {
             return {
                 message: language.no_records,
                 login_redirect: false, 
                 data: [], 
                 is_error: true 
             };
         } 
         
         // prepare data of remote server 
         var axiosOptions = { 
             api: "api/update_company_options", 
             dataObject: {
                 data_object: __object,
                 param_id: param_id_object
             }, 
             method: "post",  
             model_name: key
         };
          
         // send request for remote server 
         var request = {
             is_error: true,
             data: [],
             message: "data"
         };
         
         if( ! config.disable_remote_server ) { 
             request = await this.axiosRequest(axiosOptions);
             return request;
         }; 

         // assig log history 
         //// await this.assign_log(mobject, rowData.local_id, is_update? "update": "create" );
 
         // update data locally
         try {
 
             if(! config.disable_local_storage) { 
                 var is_saved = await instance.save({
                     key: key,
                     data: __object
                 }); 
             } 
 
             if( ! config.disable_local_storage || (! config.disable_remote_server && request.is_error == false )) {
                 return {
                     message: language.saved_success,
                     data: __object,
                     is_error: false, 
                     login_redirect: false
                 }
             }
 
             return {
                 message: language.services_disabled_by_app_admin,
                 data: [],
                 is_error: true, 
                 login_redirect: false
             }
 
         } catch (error) {
             
             var message = language.something_error;
 
             if(error.toString().includes('Quota exceeded')) {
                 message = language.quota_exceeded
             } else {
                 message = language.unexpected_error 
             }
 
             return {
                 message: message,
                 data: [],
                 is_error: true, 
                 login_redirect: false
             }
 
         }
 
         // send response 
         // return __object;
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
import Storage from 'react-native-storage';
import AsyncStorage from '@react-native-async-storage/async-storage';

import { generateId } from './helpers.js';
import {get_lang} from './languages.js' 
import { send_update_request_for_row } from './remote.js'; 

 

var getting_lanugage = (val = "en" ) => { 
    var lang = get_lang(val);  
    return lang;
}

/* Get stoeage */
const get_from_storage = async (storageName) => {

}

/* delete stoeage */
const delete_from_storage = async () => {

}

/* add stoeage */
const add_to_storage = async ( _sotrage_name, language ) => {
    
    var language = getting_lanugage(language);

    var response = {
        is_error: true,
        success: false, 
        message: language.something_error,
        data: []
    }

    try {



        await  _sotrage_name.save({

        });

        response.is_error = false;
        response.success = true;
        response.message = language.something_error;
        return response;
    } catch (error) {

        return response
    }

}



// ===================================
// ===== Products
// ===================================
 
const categories = new Storage({
    size: 150,
    storageBackend: AsyncStorage,
    defaultExpires: null
}); 

const product_prices = new Storage({
    size: 200,
    storageBackend: AsyncStorage,
    defaultExpires: null
}); 

const products = new Storage({
    size: 400,
    storageBackend: AsyncStorage,
    defaultExpires: null
}); 




// ===================================
// ===== Settings
// ===================================

const settings = new Storage({
    size: 30,
    storageBackend: AsyncStorage,
    defaultExpires: null
}); 

var add_setting = async(options) => {

    try {
        var options = {
            language: options.language ? options.language: "en",
            theme: options.theme ? options.theme: "light",
            calculate_inventory: options.calculate_inventory ? options.calculate_inventory: true 
        };
    
        await settings.save({
            key: 'settings',
            data: options
        });
    
        return true; 
    } catch {}

}

var get_setting = async() => {

    var default_object = {
        language: "en",
        theme: "light",
        calculate_inventory: true
    }

    try {
        
        const _settings = await settings.load({
            key: 'settings',
        });  
        
        if( _settings == null ) {
            
            _settings = {
                ...default_object
            }; 
 
        } 

        return _settings;

    } catch (error) {
        return  default_object; 
    }

}
 


// ===================================
// ===== Sessions
// ===================================

const session = new Storage({
    size: 30,
    storageBackend: AsyncStorage,
    defaultExpires: 1000 * 60 * 60 * 24 // 1 day expiration
}); 

var add_session = async ( application, user ) => {

    try {
        var userInfo = {
            id: user._id,
            name: user.name,
            email: user.email,  
            subscription: {
                is_subscribed: application.subscription.is_subscribed,
                from_date: application.subscription.from_date,
                to_date: application.subscription.to_date,
                is_paid: application.subscription.is_paid,
            }, 
            database_name: application.database_name,
            company_name: application.company_name 
        }
    
        await session.save({
            key: 'user',
            data: userInfo
        });
        
        return true; 
    } catch (error) { 
        return false;
    }
}

var delete_session = async () => {
    try {
        
        await session.save({
            key: 'user',
            data: null
        });

        return true; 

    } catch(error) {
        return false;
    }
}

var get_session = async () => {
    try {
        
        const _session = await session.load({
            key: 'user',
        }); 
         
        return _session;
    } catch (error) {
        return null;
    }

}

// ===================================

export {

    get_session,
    delete_session,
    add_session,
    get_setting,

    add_to_storage
}



 